{"mappings":"AAAA,uEAAuE;AAEvE,IAAI,QAAQ;IAER;;;;;;;;;;;;OAYG,GAGH,eAAe,CAAC,KAAK,OAAO,GAAG;QAC/B,IAAI,OAAO,OAAO,YACd,OAAO,IAAI;QAEf,MAAM,UAAU;YAAE;YAAK,OAAO;gBAAE,GAAG,KAAK;gBAAE;YAAS;QAAE;QACrD,QAAQ,IAAI;QACZ,OAAO;IACP;IAEA,QAAQ,CAAC,cAAc;QAEnB,IAAG;YAAC;YAAS;SAAS,CAAC,SAAS,OAAO,eAAc;YACjD,UAAU,YAAY,SAAS,eAAe,OAAO;YACrD;QACJ;QAEA,MAAM,aAAa,SAAS,cAAc,aAAa;QAEvD,IAAG,aAAa,OACZ,OACC,KAAK,aAAa,OAClB,OAAO,CAAA,IAAK,MAAM,YAClB,QAAQ,CAAA,IAAK,UAAU,CAAC,EAAE,GAAG,aAAa,KAAK,CAAC,EAAE;QAEvD,IAAG,aAAa,MAAM,UAClB,aAAa,MAAM,SAAS,QAAQ,CAAC;YACjC,MAAM,OAAO,OAAO;QACxB;QAEJ,UAAU,YAAY;IAC1B;IAEA,UAAU,CAAC,cAAc;QACrB,UAAU,YAAY;QACtB,MAAM,OAAO,cAAc;IAC/B;AAEJ;AAIA,MAAM,MAAM;IAER,qBACA,oBAAC;QAAI,WAAU;;;;;;;qBACX,oBAAC;;;;;;;OAAG,uBACJ,oBAAC;;;;;;;qBACG,oBAAC;QAAM,MAAK;QAAO,aAAY;;;;;;;uBAEnC,oBAAC;;;;;;;OAAE;AAQX;AAIA,MAAM,qBAAO,oBAAC;;;;;;;IAAQ,SAAS,cAAc","sources":["index.tsx"],"sourcesContent":["//Hay 3 fundamentos en React: El virtual DOM, Hooks y modo concurrente.\n\nlet React = {\n\n    /**\n     * El primer fundamento, el virtual DOM es COMO react maneja el DOM, el dom es una estructura en forma de objeto anidado del documento HTML, \n     * cada etiqueta HTML es interpretada por JS como un objeto y sus atributos como propiedades de ese objeto. El virtual DOM aprovecha esto para \n     * generar objetos con las etiquetas HTML y sus atributos, y asi poder manipularlos de forma mas sencilla. Para esto, utiliza XML, que es un lenguaje\n     * de marcado que permite crear etiquetas personalizadas, y asi poder crear objetos con las etiquetas HTML y sus atributos. Las etiquetas XML, no son\n     * etiquetas HTML pero se les da el mismo nombre entonces cuando se interpretan, se convierten en etiquetas HTML. Es la magia del virtual DOM.\n     * \n     * @param {string} tag - Etiqueta HTML\n     * @param {object} props - Atributos de la etiqueta HTML\n     * @param {array} children - Hijos de la etiqueta HTML si los tiene o primitivos si no tiene hijos\n     * \n     * @returns {object} - Retorna un objeto con la etiqueta HTML y sus atributos\n     * */\n\n    \n    createElement: (tag, props, ...children) => {\n    if (typeof tag == \"function\") {\n        return tag(props);\n    }\n    const element = { tag, props: { ...props, children } };\n    console.log(element)\n    return element;\n    },\n\n    render: (reactElement, container) => {\n\n        if(['string','number'].includes(typeof reactElement)){\n            container.appendChild(document.createTextNode(String(reactElement)));\n            return;\n        }   \n    \n        const domElement = document.createElement(reactElement.tag);\n    \n        if(reactElement.props){\n            Object\n            .keys(reactElement.props)\n            .filter(p => p !== 'children')\n            .forEach(p => domElement[p] = reactElement.props[p]);\n        }\n        if(reactElement.props.children){\n            reactElement.props.children.forEach((child)=>{\n                React.render(child, domElement)\n            })\n        }\n        container.appendChild(domElement); \n    },\n\n    reRender: (reactElement, container) => {\n        container.innerHTML = \"\";\n        React.render(reactElement, container);\n    }\n\n};\n\n\n\nconst App = () => {\n\n    return(\n    <div className=\"Divino\">\n        <h1>Hola</h1>\n        <div>\n            <input type=\"text\" placeholder=\"Escribe algo\" />\n        </div>\n        <p>\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Temporibus,\n        nostrum dolor ratione labore, perferendis cum maiores minus beatae nobis\n        qui soluta architecto adipisci, aut delectus. Molestias tempore adipisci\n        aut officia!\n        </p>\n    </div>\n    )\n}\n\n\n\nReact.render(<App />, document.querySelector(\"#app\"));"],"names":[],"version":3,"file":"index.ad9a7e97.js.map","sourceRoot":"/__parcel_source_root/"}